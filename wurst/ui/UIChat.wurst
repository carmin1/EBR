package UIChat
import PlayerData
import UIResolution
import UIHandles


tuple chatMessage(int time, PlayerData p, string msg)

class ChatMessage
	framehandle fh

	construct()
		fh = createSimpleFrame("chatMsg", gameFrame, this castTo int)

	function setup(PlayerData pd, string msg)
		let timestr = minutes.toString() + ":" + (seconds < 10 ? "0" : "") + seconds.toString()
		getFrame("chatMsgTime", this castTo int).setText(timestr.color(color(189, 189, 189)))
		getFrame("chatMsgBody", this castTo int).setText(pd.p.getNameColored(true) + ": " + msg)
		getFrame("chatMsgIcon", this castTo int).setTexture(pd.icon, 0, true)

let cms = new LinkedList<ChatMessage>
let maxCms = 10
let chatBL = vec2(10, 830)
var hideAt = 0
let hideTimer = CreateTimer()

public function updateChatPositions()
	var pos = chatBL.toUiCoords()
	let diff = vec2(0, 26).toUiSize()
	for cm from cms.staticBackItr()
		cm.fh..setSize(vec2(1900, 24).toUiSize())..setAbsPoint(FRAMEPOINT_TOPLEFT, pos)
		pos += diff

public function PlayerData.sendChatMessage(string msg)
	cms.push((cms.size() == maxCms ? cms.dequeue() : new ChatMessage)..setup(this, msg))
	
	updateChatPositions()

	for cm from cms.staticItr()
		cm.fh.setVisible(true)
	let time = minutes*60 + seconds
	let dur = msg.length() / 20. + 10
	hideAt = IMaxBJ(hideAt, time + dur.floor())
	hideTimer..start(I2R(hideAt - time)) ->
		for cm from cms.staticItr()
			cm.fh.setVisible(false)