package UIResolution
import ClosureTimers
import LinkedList


var resW = 0
var resH = 0

public let uiDesignResW = 1920.
public let uiDesignResH = 1080.
let r = (0.6 / uiDesignResH)

function toPortaitX(real x) returns real
	return x * (uiDesignResW / uiDesignResH) / (resW / resH) * 0.8

/** Converts screen-coordinate (with origin at top-left) to WC3 system */
public function vec2.toUiCoords(bool portrait) returns vec2
	return vec2(
		portrait
			? 0.4 + toPortaitX(this.x / uiDesignResW - 0.5)
			: (this.x - (uiDesignResW - uiDesignResH * 4. / 3) / 2) * r,
		(uiDesignResH - this.y) * r
	)

/** Converts screen-coordinate (with origin at top-left) to WC3 system */
public function vec2.toUiCoords() returns vec2
	return this.toUiCoords(false)

/** Converts (pixel-width, pixel-height) vector to WC3 system */
public function vec2.toUiSize(bool portrait) returns vec2
	return vec2(portrait ? toPortaitX(this.x / uiDesignResW) : this.x * r, this.y * r)

/** Converts pixel-width vector to WC3 system */
public function real.toUiXSize(bool portrait) returns real
	return vec2(this, 0).toUiSize(portrait).x

/** Converts pixel-width vector to WC3 system */
public function real.toUiXSize() returns real
	return this.toUiXSize(false)

/** Converts pixel-height vector to WC3 system */
public function real.toUiYSize(bool portrait) returns real
	return vec2(0, this).toUiSize(portrait).y

/** Converts pixel-height vector to WC3 system */
public function real.toUiYSize() returns real
	return this.toUiYSize(false)

/** Converts (pixel-width, pixel-height) vector to WC3 system */
public function vec2.toUiSize() returns vec2
	return this.toUiSize(false)

/** Sets the width and height of the frame */
public function framehandle.setSize(vec2 size)
	this.setSize(size.x, size.y)
	
/** Clears points and moves frame offscreen */
public function framehandle.moveAway()
	this..clearAllPoints()..setAbsPoint(FRAMEPOINT_BOTTOM, vec2(0.4, -0.18))

interface ResolutionChangeEvent
	function call(int newWidth, int newHeight)

let listeners = new LinkedList<ResolutionChangeEvent>()

/** No desync pls */
public function onResolutionChange(ResolutionChangeEvent e)
	listeners.add(e)

init
	resW = BlzGetLocalClientWidth()
	resH = BlzGetLocalClientHeight()
	doPeriodically(0.1) cb ->
		let width = BlzGetLocalClientWidth()
		let height = BlzGetLocalClientHeight()
		if width != resW or height != resH
			resW = width
			resH = height
			for l from listeners.staticItr()
				l.call(width, height)
